{"version":"0.2.0","body":"async function main(workbook: ExcelScript.Workbook) {\n\n    /* \n    Example calling Decision Service from Excel Using Office Script\n    */\n\n    console.log(\"Example Started\");\n\n    // The URL of our decision service -you will need to update this\n    let url =\n        \"https://dmn-dev-sandbox-gd12mqh3f203-crt-openshift-dev.apps.sandbox.x8i5.p1.openshiftapps.com/Customer Recommendations/Product Recommendation Service\";\n\n    // headers - won't change\n    const headers = {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n    };\n\n    // setup our standard package wwe will pass to the Decision Service.\n    // We change the values using script  but easier to start with defaults like this\n    let payload = {\n        Customer: {\n            Number: 1000,\n            Name: \"Jane Doe\",\n            \"Date of Birth\": \"2022 - 10 - 15\",\n            \"Country of Residence\": \"NL\",\n            \"Special Requests\": \"NA\",\n            \"Previous Orders\": [0]\n        }\n    };\n\n    // Log the values we are going to pass to the decision service\n    console.log(\"Calling Decision Service with the Payload\");\n    console.log(JSON.stringify(payload));\n\n    // Make the call to the Decision Service and wait for response\n    const response = await fetch(url, { method: \"POST\", headers: headers, body: JSON.stringify(payload) });\n    const jsonResponse: Object = await response.json();\n\n    // Log the values we we get back from the decision service. We don't stringify this, which allows you to explore the object tree in the Console.\n    console.log(\"Response from the Decision Service\");\n    console.log(jsonResponse);\n\n\n    //get the specfic values within the response we are interested in\n    let productRecommendation: Object= jsonResponse[\"decisionResults\"][0][\"result\"];\n    console.log(\"Product Recommendation\");\n    console.log(productRecommendation);\n\n\n    //(re)create our output sheet\n    // The ? ensures that the delete() API is only called if the object exists.\n    workbook.getWorksheet('Product Recommendation')?.delete();\n    let thisSheet= workbook.addWorksheet('Product Recommendation');\n\n\n    //(re)create the Headers\n    let headerRange = thisSheet.getCell(0,0);\n    headerRange.getFormat().getFill().setColor(\"#4472C4\");\n    headerRange.getFormat().getFont().setColor(\"white\");\n    headerRange.setValue(\"Recommendation from Decision Service\");\n    headerRange.getFormat().autofitColumns();\n\n\n    //Update the sheet with our recommendation\n    let datarange = thisSheet.getCell(1, 0);\n    if (!Array.isArray(productRecommendation)) {\n\n        // single value\n        datarange.setValue(productRecommendation);\n    } else {\n\n        //mutiple values we put into one cell\n        //in real life you update a range\n      datarange.setValue(JSON.stringify(productRecommendation));\n    }\n\n\n    //Set the sheet to active\n    thisSheet.activate();\n\n\n}\n","description":"Test script","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}